#!/usr/bin/env node
const http = require("http");
const socket = require('socket.io');

let App = require("../app");
let app = App.app
let session = App.session

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render("not-found");
});

app.use((err, req, res, next) => {
  // always log the error
  console.error("ERROR", req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render("error");
  }
});

let server = http.createServer(app);
const io = socket(server, {
  cors: {
    origin: "http://localhost:3000",
    // methods: ["GET", "POST"]
  }
});

server.on("error", (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

// Socket.io Setup
io.use((socket, next) => {
  session(socket.request, {}, next)
});

io.on('connection', socket => {
  console.log("coucou le client!")
  socket.emit("myEvent", 3)
  socket.emit("myEvent2", "Ã¨me")
})

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});